version: "3"

services:
  postgres:
    image: "postgres:14-alpine"
    env_file:
      - postgres.env
    ports:
      - "5432:5432"
    container_name: "postgres-deadflowers"
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 60s

  backend:
    build: ./services/backend
    image: backend-deadflowers
    env_file:
      - backend.env
      - postgres.env
    links:
      - "postgres:database"
    ports:
      - "5000:5000"
    container_name: "backend-deadflowers"
    depends_on:
      - postgres
      - redis
      - worker

  frontend:
    build: ./services/frontend
<<<<<<< HEAD
    image: frontend-deadflowers
    links:
      - backend
=======
    environment:
      - NODE_OPTIONS=--openssl-legacy-provider # required for node to start, bug with current version of node 
>>>>>>> 1a8908e (Prepare websockets integration)
    ports:
      - "8080:8080"
    volumes:
      - ./services/frontend/src:/app/src
    container_name: "frontend-deadflowers"

  redis:
    image: "redis:alpine"
    environment:
      - REDIS_PASSWORD=test123
    ports:
      - "6379:6379"
    volumes:
      - "redis:/var/lib/redis/data"
    container_name: "redis-deadflowers"

  worker:
<<<<<<< HEAD
    build:
      context: ./services/backend
      dockerfile: ./app/worker/Dockerfile
    image: worker-deadflowers
=======
    build: ./services/backend
    command: celery worker -E --app=app.worker.app.celery --loglevel=info
>>>>>>> 1a8908e (Prepare websockets integration)
    env_file:
      - backend.env
      - postgres.env
    container_name: "worker-deadflowers"
    links:
      - "postgres:database"
    depends_on:
      - postgres

volumes:
  postgres: null
  redis: null
